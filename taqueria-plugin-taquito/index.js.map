{"mappings":"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","sources":["index.ts","originate.ts"],"sourcesContent":["import {Plugin, Task} from 'taqueria-sdk'\nimport type { i18n} from 'taqueria-sdk/types'\nimport originate from './originate'\n\nPlugin.create((i18n: i18n) => ({\n    name: \"taquito\",\n    schema: \"1.0\",\n    version: \"0.1\",\n    tasks: [\n        Task.create({\n            task: \"deploy\",\n            command: \"deploy [contract]\",\n            description: \"Deploy a smart contract to a particular environment\",\n            options: [\n            ],\n            aliases: [\"originate\"],\n            handler: \"proxy\"\n        }),\n    ],\n    proxy: originate\n}), process.argv)","import { SanitizedArgs, ActionResponse, Failure, LikeAPromise, ProxyAction } from \"taqueria-sdk/types\";\nimport glob from 'fast-glob'\nimport {join} from 'path'\nimport { TezosToolkit } from '@taquito/taquito';\nimport { InMemorySigner, importKey } from '@taquito/signer';\nimport {readFile} from 'fs/promises'\n\ntype Opts = SanitizedArgs & Record<string, unknown>\n\nconst getContractAbspath = (contractFilename: string, parsedArgs: Opts) => \n    join(parsedArgs.artifactsDir, /\\.tz$/.test(contractFilename) ? contractFilename : `${contractFilename}.tz`)\n\n\nconst originateContract = (parsedArgs: Opts) => async (contractFilename: string) : Promise<string> => {\n    const contractAbspath = getContractAbspath(contractFilename, parsedArgs)\n\n    // TODO: Should getting the default environment be provided by the SDK or the framework?\n    const currentEnv = parsedArgs.env\n        ? (parsedArgs.env as string)\n        : (\n            parsedArgs.config.environment\n                ? parsedArgs.config.environment.default\n                : 'development'\n        )\n    const env = parsedArgs.config.environment && parsedArgs.config.environment[currentEnv]\n            ? parsedArgs.config.environment[currentEnv]\n            : undefined\n            \n    // Has storage been provided for this contract?\n    if (env && env.storage) {\n        try {\n            const tezos = new TezosToolkit(env.rpcUrl)\n            const contractData = await readFile(contractAbspath, \"utf-8\")\n            await importKey(tezos, env.faucet.email, env.faucet.password, env.faucet.mnemonic.join(' '), env.faucet.activation_code)\n            \n            return tezos.contract.originate({\n                code: contractData,\n                storage: env.storage[contractFilename]\n            })\n            .then(operation => `${contractFilename}: ${operation.contractAddress}`)\n        }\n        catch (err) {\n            return Promise.reject({\n                status: 'failed',\n                stdout: \"\",\n                stderr: err\n            })\n        }\n    }\n\n    return Promise.reject({\n        status: 'failed',\n        stderr: `No storage configured in your configuration file for ${contractFilename}`,\n        stdout: \"\"\n    })\n}\n\nconst originateAll = (parsedArgs: Opts) : Promise<string[]> =>\n    glob(\"**/*.tz\", {cwd: parsedArgs.artifactsDir})\n    .then(files => Promise.all(files.map(originateContract(parsedArgs))))\n\nexport const originate = <T>(parsedArgs: Opts): LikeAPromise<ActionResponse, Failure<T>> => {\n    const p = parsedArgs.contract\n        ? originateContract(parsedArgs) (parsedArgs.contract as string)\n        : originateAll(parsedArgs)\n\n    return p.then(data => ({\n        status: 'success',\n        stdout: Array.isArray(data) ? data.join(\"\\n\") : data,\n        stderr: \"\"\n    }))\n}\n\nexport default originate"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"/"}